//
// Created by Yosuke Takahashi on 8/19/18.
//

#include <gtest/gtest.h>
#include "../src/ukf.h"
#include "../src/measurement_package.h"
#include "../src/ukf.cpp"
#include "Eigen/Dense"
#include <iostream>

using namespace std;
using Eigen::MatrixXd;
using Eigen::VectorXd;


TEST(UKFTest, GenerateAugmentedSigmaPoints) {
    UKF ukf;

//    MeasurementPackage meas_package;
//    meas_package.sensor_type_ = MeasurementPackage::RADAR;
//    meas_package.raw_measurements_ = VectorXd(3);

    ukf.n_x_ = 5;
    ukf.n_aug_ = 7;
    ukf.std_a_ = 0.2;
    ukf.std_yawdd_ = 0.2;
    ukf.lambda_ = 3 - ukf.n_aug_;

    VectorXd x = VectorXd(ukf.n_x_);
    x << 5.7441,
         1.3800,
         2.2049,
         0.5015,
         0.3528;
    ukf.x_ = x;

    MatrixXd P = MatrixXd(ukf.n_x_, ukf.n_x_);
    P <<     0.0043,   -0.0013,    0.0030,   -0.0022,   -0.0020,
            -0.0013,    0.0077,    0.0011,    0.0071,    0.0060,
            0.0030,    0.0011,    0.0054,    0.0007,    0.0008,
            -0.0022,    0.0071,    0.0007,    0.0098,    0.0100,
            -0.0020,    0.0060,    0.0008,    0.0100,    0.0123;
    ukf.P_ = P;


    MatrixXd Xsig_aug = MatrixXd(7, 15);
    ukf.GenerateAugmentedSigmaPoints(&Xsig_aug);

    MatrixXd ExpectedOutput = MatrixXd(7, 15);
    ExpectedOutput <<
    5.7441,  5.85768,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,  5.63052,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,
    1.38,  1.34566,  1.52806,     1.38,     1.38,     1.38,     1.38,     1.38,  1.41434,  1.23194,     1.38,     1.38,     1.38,     1.38,     1.38,
    2.2049,  2.28414,  2.24557,  2.29582,   2.2049,   2.2049,   2.2049,   2.2049,  2.12566,  2.16423,  2.11398,   2.2049,   2.2049,   2.2049,   2.2049,
    0.5015,  0.44339, 0.631886, 0.516923, 0.595227,   0.5015,   0.5015,   0.5015,  0.55961, 0.371114, 0.486077, 0.407773,   0.5015,   0.5015,   0.5015,
    0.3528, 0.299973, 0.462123, 0.376339,  0.48417, 0.418721,   0.3528,   0.3528, 0.405627, 0.243477, 0.329261,  0.22143, 0.286879,   0.3528,   0.3528,
    0,        0,        0,        0,        0,        0,  0.34641,        0,        0,        0,        0,        0,        0, -0.34641,        0,
    0,        0,        0,        0,        0,        0,        0,  0.34641,        0,        0,        0,        0,        0,        0, -0.34641;

    ASSERT_TRUE(Xsig_aug.isApprox(ExpectedOutput, 0.001));
}

TEST(UKFTest, SigmaPointPrediction) {
    UKF ukf;

    ukf.n_x_ = 5;
    ukf.n_aug_ = 7;

    MatrixXd Xsig_aug = MatrixXd(ukf.n_aug_, 2 * ukf.n_aug_ + 1);
    Xsig_aug <<
             5.7441,  5.85768,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.63052,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,
            1.38,  1.34566,  1.52806,     1.38,     1.38,     1.38,     1.38,     1.38,   1.41434,  1.23194,     1.38,     1.38,     1.38,     1.38,     1.38,
            2.2049,  2.28414,  2.24557,  2.29582,   2.2049,   2.2049,   2.2049,   2.2049,   2.12566,  2.16423,  2.11398,   2.2049,   2.2049,   2.2049,   2.2049,
            0.5015,  0.44339, 0.631886, 0.516923, 0.595227,   0.5015,   0.5015,   0.5015,   0.55961, 0.371114, 0.486077, 0.407773,   0.5015,   0.5015,   0.5015,
            0.3528, 0.299973, 0.462123, 0.376339,  0.48417, 0.418721,   0.3528,   0.3528,  0.405627, 0.243477, 0.329261,  0.22143, 0.286879,   0.3528,   0.3528,
            0,        0,        0,        0,        0,        0,  0.34641,        0,         0,        0,        0,        0,        0, -0.34641,        0,
            0,        0,        0,        0,        0,        0,        0,  0.34641,         0,        0,        0,        0,        0,        0, -0.34641;

    ukf.Xsig_pred_.fill(0.0);
    double delta_t = 0.1;
    ukf.SigmaPointPrediction(Xsig_aug, &ukf.Xsig_pred_, delta_t);

    MatrixXd ExpectedOutput = MatrixXd(5, 15);
    ExpectedOutput <<
    5.93553, 6.06251, 5.92217, 5.9415, 5.92361, 5.93516, 5.93705, 5.93553, 5.80832, 5.94481, 5.92935, 5.94553, 5.93589, 5.93401, 5.93553,
    1.48939, 1.44673, 1.66484, 1.49719, 1.508, 1.49001, 1.49022, 1.48939, 1.5308, 1.31287, 1.48182, 1.46967, 1.48876, 1.48855, 1.48939,
    2.2049, 2.28414, 2.24557, 2.29582, 2.2049, 2.2049, 2.23954, 2.2049, 2.12566, 2.16423, 2.11398, 2.2049, 2.2049, 2.17026, 2.2049,
    0.53678, 0.473387, 0.678098, 0.554557, 0.643644, 0.543372, 0.53678, 0.538512, 0.600173, 0.395462, 0.519003, 0.429916, 0.530188, 0.53678, 0.535048,
    0.3528, 0.299973, 0.46212, 0.376339, 0.48417, 0.418721, 0.3528, 0.387441, 0.405627, 0.243477, 0.329261, 0.22143, 0.286879, 0.3528, 0.318159;

    ASSERT_TRUE(ukf.Xsig_pred_.isApprox(ExpectedOutput, 0.001));
}

TEST(UKFTest, PredictMeanAndCovariance) {
    UKF ukf;

    ukf.n_x_ = 5;
    ukf.n_aug_ = 7;
    ukf.lambda_ = 3 - ukf.n_aug_;

    ukf.Xsig_pred_ = MatrixXd(ukf.n_x_, 2 * ukf.n_aug_ + 1);
    ukf.Xsig_pred_ <<
    5.9374,  6.0640,   5.925,  5.9436,  5.9266,  5.9374,  5.9389,  5.9374,  5.8106,  5.9457,  5.9310,  5.9465,  5.9374,  5.9359,  5.93744,
    1.48,  1.4436,   1.660,  1.4934,  1.5036,    1.48,  1.4868,    1.48,  1.5271,  1.3104,  1.4787,  1.4674,    1.48,  1.4851,    1.486,
    2.204,  2.2841,  2.2455,  2.2958,   2.204,   2.204,  2.2395,   2.204,  2.1256,  2.1642,  2.1139,   2.204,   2.204,  2.1702,   2.2049,
    0.5367, 0.47338, 0.67809, 0.55455, 0.64364, 0.54337,  0.5367, 0.53851, 0.60017, 0.39546, 0.51900, 0.42991, 0.530188,  0.5367, 0.535048,
    0.352, 0.29997, 0.46212, 0.37633,  0.4841, 0.41872,   0.352, 0.38744, 0.40562, 0.24347, 0.32926,  0.2214, 0.28687,   0.352, 0.318159;

    VectorXd x_pred = VectorXd(5);
    MatrixXd P_pred = MatrixXd(5, 5);
    ukf.PredictMeanAndCovariance(&x_pred, &P_pred);

    VectorXd x_pred_expected = VectorXd(5);
    x_pred_expected <<
    5.93637,
    1.49035,
    2.20528,
    0.536853,
    0.353577;

    MatrixXd P_pred_expected = MatrixXd(5, 5);
    P_pred_expected <<
    0.00543425, -0.0024053, 0.00341576, -0.00348196, -0.00299378,
    -0.0024053, 0.010845, 0.0014923, 0.00980182, 0.00791091,
    0.00341576, 0.0014923, 0.00580129, 0.000778632, 0.000792973,
    -0.00348196, 0.00980182, 0.000778632, 0.0119238, 0.0112491,
    -0.00299378, 0.00791091, 0.000792973, 0.0112491, 0.0126972;

    ASSERT_TRUE(x_pred.isApprox(x_pred_expected, 0.001));
    ASSERT_TRUE(P_pred.isApprox(P_pred_expected, 0.001));
}

TEST(UKFTest, PredictRadarMeasurement) {
    UKF ukf;

    ukf.n_x_ = 5;
    ukf.n_aug_ = 7;
    ukf.lambda_ = 3 - ukf.n_aug_;

    ukf.std_radr_ = 0.3;
    ukf.std_radphi_ = 0.0175;
    ukf.std_radrd_ = 0.1;

    ukf.Xsig_pred_ = MatrixXd(ukf.n_x_, 2 * ukf.n_aug_ + 1);
    ukf.Xsig_pred_ <<
    5.9374,  6.0640,   5.925,  5.9436,  5.9266,  5.9374,  5.9389,  5.9374,  5.8106,  5.9457,  5.9310,  5.9465,  5.9374,  5.9359,  5.93744,
    1.48,  1.4436,   1.660,  1.4934,  1.5036,    1.48,  1.4868,    1.48,  1.5271,  1.3104,  1.4787,  1.4674,    1.48,  1.4851,    1.486,
    2.204,  2.2841,  2.2455,  2.2958,   2.204,   2.204,  2.2395,   2.204,  2.1256,  2.1642,  2.1139,   2.204,   2.204,  2.1702,   2.2049,
    0.5367, 0.47338, 0.67809, 0.55455, 0.64364, 0.54337,  0.5367, 0.53851, 0.60017, 0.39546, 0.51900, 0.42991, 0.530188,  0.5367, 0.535048,
    0.352, 0.29997, 0.46212, 0.37633,  0.4841, 0.41872,   0.352, 0.38744, 0.40562, 0.24347, 0.32926,  0.2214, 0.28687,   0.352, 0.318159;


    VectorXd z_out = VectorXd(3);
    MatrixXd S_out = MatrixXd(3, 3);
    MatrixXd Tc_out = MatrixXd(ukf.n_x_, 3);
    ukf.PredictRadarMeasurement(&z_out, &S_out, &Tc_out);

    VectorXd z_out_expected = VectorXd(3);
    z_out_expected <<
    6.12155,
    0.245993,
    2.10313;

    MatrixXd S_out_expected = MatrixXd(3, 3);
    S_out_expected <<
    0.0946171, -0.000139448, 0.00407016,
    -0.000139448, 0.000617548, -0.000770652,
    0.00407016, -0.000770652, 0.0180917;

    ASSERT_TRUE(z_out.isApprox(z_out_expected, 0.001));
    ASSERT_TRUE(S_out.isApprox(S_out_expected, 0.001));
}

TEST(UKFTest, UpdateStateWithRadarMeasurement) {
    UKF ukf;

    int n_z = 3;
    ukf.n_x_ = 5;
    ukf.n_aug_ = 7;
    ukf.lambda_ = 3 - ukf.n_aug_;

    //create example vector for predicted state mean
    ukf.x_ = VectorXd(ukf.n_x_);
    ukf.x_ <<
      5.93637,
            1.49035,
            2.20528,
            0.536853,
            0.353577;

    //create example matrix for predicted state covariance
    ukf.P_ = MatrixXd(ukf.n_x_,ukf.n_x_);
    ukf.P_ <<
      0.0054342,  -0.002405,  0.0034157, -0.0034819, -0.00299378,
            -0.002405,    0.01084,   0.001492,  0.0098018,  0.00791091,
            0.0034157,   0.001492,  0.0058012, 0.00077863, 0.000792973,
            -0.0034819,  0.0098018, 0.00077863,   0.011923,   0.0112491,
            -0.0029937,  0.0079109, 0.00079297,   0.011249,   0.0126972;

    ukf.Xsig_pred_ = MatrixXd(ukf.n_x_, 2 * ukf.n_aug_ + 1);
    ukf.Xsig_pred_ <<
              5.9374,  6.0640,   5.925,  5.9436,  5.9266,  5.9374,  5.9389,  5.9374,  5.8106,  5.9457,  5.9310,  5.9465,  5.9374,  5.9359,  5.93744,
            1.48,  1.4436,   1.660,  1.4934,  1.5036,    1.48,  1.4868,    1.48,  1.5271,  1.3104,  1.4787,  1.4674,    1.48,  1.4851,    1.486,
            2.204,  2.2841,  2.2455,  2.2958,   2.204,   2.204,  2.2395,   2.204,  2.1256,  2.1642,  2.1139,   2.204,   2.204,  2.1702,   2.2049,
            0.5367, 0.47338, 0.67809, 0.55455, 0.64364, 0.54337,  0.5367, 0.53851, 0.60017, 0.39546, 0.51900, 0.42991, 0.530188,  0.5367, 0.535048,
            0.352, 0.29997, 0.46212, 0.37633,  0.4841, 0.41872,   0.352, 0.38744, 0.40562, 0.24347, 0.32926,  0.2214, 0.28687,   0.352, 0.318159;


    VectorXd z = VectorXd(n_z);
    z <<
      5.9214,   //rho in m
            0.2187,   //phi in rad
            2.0062;   //rho_dot in m/s

    VectorXd z_pred = VectorXd(n_z);
    z_pred <<
           6.12155,
            0.245993,
            2.10313;

    MatrixXd S = MatrixXd(n_z,n_z);
    S <<
      0.0946171, -0.000139448,   0.00407016,
            -0.000139448,  0.000617548, -0.000770652,
            0.00407016, -0.000770652,    0.0180917;

    MatrixXd Tc = MatrixXd(ukf.n_x_, n_z);
    Tc <<
    0.00468594, -0.000596824, 0.005098,
    0.000293374,   0.00181443,  -0.00359072,
    0.00367515,   0.00010101,    0.0051288,
    -0.000999062,    0.0016919,  -0.00573717,
    -0.000985023,   0.00137277,  -0.00548931;

    ukf.UpdateStateWithRadarMeasurement(z, z_pred, S, Tc);

    VectorXd x_expected = VectorXd(5);
    x_expected <<
    5.92276,
    1.41823,
    2.15593,
    0.489274,
    0.321338;

    MatrixXd P_expected = MatrixXd(5, 5);
    P_expected <<
    0.00361579, -0.000357881, 0.00208316, -0.000937196, -0.00071727,
    -0.000357881, 0.00539867, 0.00156846, 0.00455342, 0.00358885,
    0.00208316, 0.00156846, 0.00410651, 0.00160333, 0.00171811,
    -0.000937196, 0.00455342, 0.00160333, 0.00652634, 0.00669436,
    -0.00071719, 0.00358884, 0.00171811, 0.00669426, 0.00881797;

    cout << "x = " << endl << ukf.x_ << endl;
    cout << "P = " << endl << ukf.P_ << endl;

    ASSERT_TRUE(ukf.x_.isApprox(x_expected, 0.001));
    ASSERT_TRUE(ukf.P_.isApprox(P_expected, 0.01));
}
